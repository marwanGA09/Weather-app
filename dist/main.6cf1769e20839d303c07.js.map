{"version":3,"file":"main.6cf1769e20839d303c07.js","mappings":"mBACA,IAAIA,EAAsB,CAAC,ECD3BA,EAAoBC,EAAI,WACvB,GAA0B,iBAAfC,WAAyB,OAAOA,WAC3C,IACC,OAAOC,MAAQ,IAAIC,SAAS,cAAb,EAChB,CAAE,MAAOC,GACR,GAAsB,iBAAXC,OAAqB,OAAOA,MACxC,CACA,CAPuB,G,MCAxB,IAAIC,EACAP,EAAoBC,EAAEO,gBAAeD,EAAYP,EAAoBC,EAAEQ,SAAW,IACtF,IAAIC,EAAWV,EAAoBC,EAAES,SACrC,IAAKH,GAAaG,IACbA,EAASC,gBACZJ,EAAYG,EAASC,cAAcC,MAC/BL,GAAW,CACf,IAAIM,EAAUH,EAASI,qBAAqB,UAC5C,GAAGD,EAAQE,OAEV,IADA,IAAIC,EAAIH,EAAQE,OAAS,EAClBC,GAAK,KAAOT,IAAc,aAAaU,KAAKV,KAAaA,EAAYM,EAAQG,KAAKJ,GAE3F,CAID,IAAKL,EAAW,MAAM,IAAIW,MAAM,yDAChCX,EAAYA,EAAUY,QAAQ,OAAQ,IAAIA,QAAQ,QAAS,IAAIA,QAAQ,YAAa,KACpFnB,EAAoBoB,EAAIb,C,iJCbxBc,QAAQC,IAAIC,GACZ,MAAMC,EAAgB,iCAqBtB,SAASC,EAAWC,IAVpBC,eAAiClB,GAC/B,MAAMmB,QAAgBC,MACnB,mDAAkDL,OAAmBf,KAExE,IAAKmB,EAAQE,GACX,MAAM,IAAIZ,MAAO,gCAA+BU,EAAQG,cAE1D,aAAaH,EAAQI,MACvB,EAGgBC,CAAkBP,GAE7BQ,MAAMC,IACL,GAAIA,EAAKC,MACP,MAAM,IAAIlB,MAAO,GAAEiB,EAAKC,MAAMC,WA+CtC,IAA+B5B,EA7CvBC,SACG4B,cAAc,aACdC,mBACC,aA2CF,0GADqB9B,EAzCG0B,EAAK1B,UA4C4B+B,gBAAgB/B,EAASgC,qGAzCpF/B,SACG4B,cAAc,YACdC,mBAAmB,aA4C9B,SAA8BX,GAC5B,MAAQ,sKAG4CA,EAAQc,UAAUC,sGAElCf,EAAQc,UAAUE,gKAIzBhB,EAAQiB,kBAAkBjB,EAAQkB,2GAG1CC,yKAKMnB,EAAQoB,0DAEdA,6NAMYpB,EAAQL,wDAEpBA,mHAKvB,CA7E4C0B,CAAqBd,EAAKe,UAwFtEvB,eAAyBc,GACvB,MAAMU,QAAatB,MAAO,uCAAsCY,KAEhE,aAAaU,EAAKnB,MACpB,CA9DeoB,CA5BDjB,EAAK1B,SAASgC,SA6BrBP,MAAMiB,IACTzC,SAAS4B,cAAc,SAAS1B,IAAMuC,EAAK,GAAGE,MAAMC,GAAG,GA9BvB,IAE/BC,OAAOnB,IACY1B,SAAS4B,cAAc,UAC/BC,mBACR,WACC,qCAAoCH,EAAMC,WAAWX,WACvD,IAEF8B,SAAQ,KACQ9C,SAAS4B,cAAc,WAC/BmB,MAAQ,EAAE,GAEvB,CAnDkB/C,SAAS4B,cAAc,cAC/BoB,aACR,QACC,wJAIeC,OA8ClBlC,EAAW,eA8DX,MAAMmC,EAASlD,SAAS4B,cAAc,WACtCsB,EAAOC,iBAAiB,WAAYC,IAEhB,UAAdA,EAAMC,OAhEZ,WACmBrD,SAASsD,iBAAiB,eAClCC,SAAS7C,GAAMA,EAAE8C,WACVxD,SAASsD,iBAAiB,gBAClCC,SAASE,GAAQA,EAAID,WAC7B,MAAM9B,EAAQ1B,SAAS4B,cAAc,UACxB,MAATF,IACFA,EAAMgC,UAAY,GAEtB,CAwDIC,GACA5C,EAAWmC,EAAOH,OACpB,G","sources":["webpack://to-do-app/webpack/bootstrap","webpack://to-do-app/webpack/runtime/global","webpack://to-do-app/webpack/runtime/publicPath","webpack://to-do-app/./src/index.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","import './tailwind.css';\nimport cloud from './img/cloud.jpg';\nimport humidity from './img/humidity.webp';\nimport wind from './img/wind.png';\nimport bg from './img/roadandrain.jpeg';\nconsole.log(cloud);\nconst weatherApiKey = 'afbc932eb78247838c451817240703';\nconst container = document.querySelector('.container');\ncontainer.setAttribute(\n  'style',\n  ` background-image: linear-gradient(\n              rgba(73, 220, 73, 0.369),\n              rgba(241, 71, 71, 0.39)\n            ),\n            url(${bg});`\n);\n\nasync function getWeatherFromApi(location) {\n  const weather = await fetch(\n    `https://api.weatherapi.com/v1/forecast.json?key=${weatherApiKey}&q=${location}`\n  );\n  if (!weather.ok) {\n    throw new Error(`Error fetching weather data: ${weather.statusText}`);\n  }\n  return await weather.json();\n}\n\nfunction renderPage(place) {\n  let weather = getWeatherFromApi(place);\n  weather\n    .then((data) => {\n      if (data.error) {\n        throw new Error(`${data.error.message}`);\n      } else {\n        document\n          .querySelector('.location')\n          .insertAdjacentHTML(\n            'afterbegin',\n            createLocationContent(data.location)\n          );\n\n        document\n          .querySelector('.weather')\n          .insertAdjacentHTML('afterbegin', createWeatherContent(data.current));\n      }\n      addFlag(data.location.country);\n    })\n    .catch((error) => {\n      const errorSpan = document.querySelector('#label');\n      errorSpan.insertAdjacentHTML(\n        'afterend',\n        `<span class=\"error text-gray-200\">${error.message} ${place}</span>`\n      );\n    })\n    .finally(() => {\n      const search = document.querySelector('#search');\n      search.value = '';\n    });\n}\n\nrenderPage('addis abeba');\nfunction removeChild() {\n  const location = document.querySelectorAll('.location p');\n  location.forEach((p) => p.remove());\n  const weather = document.querySelectorAll('.weather div');\n  weather.forEach((div) => div.remove());\n  const error = document.querySelector('.error');\n  if (error != null) {\n    error.innerHTML = '';\n  }\n}\n\nfunction addFlag(country) {\n  const flag = fetchTest(country);\n  flag.then((flag) => {\n    document.querySelector('.flag').src = flag[0].flags.png;\n  });\n}\n\nfunction createLocationContent(location) {\n  return `\n              <p class=\"country text-2xl\">\n              <span class=\"border-b-2 border-green-300\">${location.name}</span>, ${location.country}\n            </p>\n            <p class=\"time text-xl text-gray-950\">12/01/2024 12:30</p>`;\n}\n\nfunction createWeatherContent(weather) {\n  return `<div\n              class=\"condition md:flex md:justify-between md:items-center lg:col-span-3\"\n            >\n              <span class=\"text\">Weather condition: ${weather.condition.text}</span>\n              <div class=\"icon md:w-11 md:h-10\">\n                <img id=\"icon\" src=\"${weather.condition.icon}\" alt=\"\" />\n              </div>\n            </div>\n            <div class=\"flex justify-between md:items-center wind\">\n              <p>Wind speed: ${weather.wind_kph}kmh to ${weather.wind_dir}</p>\n              <img\n                class=\"w-6 h-6 md:w-11 md:h-10\"\n                src=\"${wind}\"\n                alt=\"\"\n              />\n            </div>\n            <div class=\"flex justify-between md:items-center humidity\">\n              <p>Humidity: ${weather.humidity}</p>\n              <img\n                src=\"${humidity}\"\n                alt=\"\"\n                class=\"w-6 h-6 md:w-11 md:h-10\"\n              />\n            </div>\n            <div class=\"flex justify-between md:items-center cloud\">\n              <p>Cloud coverage: ${weather.cloud}%</p>\n              <img\n                src=\"${cloud}\"\n                alt=\"\"\n                class=\"w-6 h-6 md:w-11 md:h-10\"\n              />\n            </div>`;\n}\n\nconst search = document.querySelector('#search');\nsearch.addEventListener('keydown', (event) => {\n  // console.log(event.key);\n  if (event.key === 'Enter') {\n    removeChild();\n    renderPage(search.value);\n  }\n});\n\nasync function fetchTest(country) {\n  const flag = await fetch(`https://restcountries.com/v3.1/name/${country}`);\n\n  return await flag.json();\n}\n"],"names":["__webpack_require__","g","globalThis","this","Function","e","window","scriptUrl","importScripts","location","document","currentScript","src","scripts","getElementsByTagName","length","i","test","Error","replace","p","console","log","cloud","weatherApiKey","renderPage","place","async","weather","fetch","ok","statusText","json","getWeatherFromApi","then","data","error","message","querySelector","insertAdjacentHTML","name","country","condition","text","icon","wind_kph","wind_dir","wind","humidity","createWeatherContent","current","flag","fetchTest","flags","png","catch","finally","value","setAttribute","bg","search","addEventListener","event","key","querySelectorAll","forEach","remove","div","innerHTML","removeChild"],"sourceRoot":""}